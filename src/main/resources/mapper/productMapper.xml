<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="hiccup.hiccupstore.product.dao.ProductMapper">
<!--
    꺽쇠 논리연산자 사용시
    Tag로 인식해서 오류 발생할 수 있으니
    <![CDATA[ ... ]]> 로 감싸주기
-->


<!-- Result Map : Product / ProductImage / ProductForView -->
    <!-- hiccup.hiccupstore.product.dto.Product -->
    <resultMap id="product" type="hiccup.hiccupstore.product.dto.Product">
        <result column="productId"  property="productId"/>
        <result column="categoryId"  property="categoryId"/>
        <result column="productName"  property="productName"/>
        <result column="price"  property="price"/>
        <result column="quantity"  property="quantity"/>
        <result column="alcoholContent"  property="alcoholContent"/>
        <result column="brand"  property="brand"/>
        <result column="description"  property="description"/>
        <result column="sellCount" property="sellCount"/>
    </resultMap>
    <resultMap id="productForView" type="hiccup.hiccupstore.product.dto.ProductForView">
        <result column="productId"  property="productId"/>
        <result column="productName"  property="productName"/>
        <result column="price"  property="price"/>
        <result column="quantity"  property="quantity"/>
        <result column="sellCount" property="sellCount"/>
        <result column="reviewCount" property="reviewCount"/>
        <result column="pickCount" property="pickCount"/>
        <result column="imgPath" property="imgPath"/>
    </resultMap>

<!-- INSERT -->
    <!-- Product 테이블 -->
    <insert id="insertProduct" parameterType="hiccup.hiccupstore.product.dto.Product">
        insert into product
        values (#{productId},
                #{categoryId},
                #{productName},
                #{price},
                #{quantity},
                #{alcoholContent},
                #{brand},
                #{description},
                #{sellCount})
    </insert>
    <!-- ProductImage 테이블 -->
    <insert id="insertProductImage" parameterType="hiccup.hiccupstore.product.dto.ProductImage">
        insert into product_image
        values (#{imageId},
                #{productId},
                #{imageName},
                #{imagePath},
                #{iamgeType})
    </insert>


<!-- UPDATE -->
    <!-- Product 수정 -->
    <update id="updateProduct" parameterType="hiccup.hiccupstore.product.dto.Product">
        UPDATE product
        SET productName = #{productName},
            price = #{price},
            quantity = #{quantity},
            alcoholContent = #{alcoholContent},
            brand = #{brand},
            description = #{description},
            sellCount = #{sellCount}
        WHERE productId = #{productId} and categoryId = #{categoryId}
    </update>
    <!-- ProductImage 수정 -->
    <update id="updateProductImage" parameterType="hiccup.hiccupstore.product.dto.ProductImage">
        UPDATE product_image
        SET imageName = #{imageName},
            imagePath = #{imagePath}
        WHERE productId = #{productId} and imageType LIKE  '%'+#{imageType}+'%'
    </update>


<!-- DELETE -->
    <!-- Product 삭제 -->
    <delete id="deleteProduct" parameterType="Integer">
        delete from product
        where productId = #{productId}
    </delete>

    <!-- ProductImage 삭제 -->
    <delete id="deleteProductImage" parameterType="Integer">
        delete from product_image
        where imageId = #{imageId}
    </delete>


<!-- SELECT -->
    <!-- 상품 정보 조회 usage : 상품 상세 정보 페이지 -->
    <select id="selectById" resultMap="product" parameterType="Integer">
        SELECT *
        FROM product
        WHERE productId = #{productId}
    </select>

    <!-- 상품 리스트 조회 : Mapper Service에서 Map 타입으로 파라미터 넣어주기 -->
        <!--
        <result column="productId"  property="productId"/>
        <result column="productName"  property="productName"/>
        <result column="price"  property="price"/>
        <result column="quantity"  property="quantity"/>
        <result column="sellCount" property="sellCount"/>
        <result column="reviewCount" property="reviewCount"/>
        <result column="pickCount" property="pickCount"/>
        <result column="imgPath" property="imgPath"/>
        -->
    <select id="selectByCategory" resultType="productForView" parameterType="HashMap">
    <!-- Parameter : categoryId(int) , sort(String) -->
        SELECT p.productid,
               p.productname,
               p.price,
               p.quantity,
               p.sellCount,
               b.reviewCount,
               up.pickCount,
               pi.imagePath
        FROM product p
            LEFT JOIN (SELECT productId, imagePath
                       FROM product_image
                       WHERE imageType = 'product') pi ON p.productId = pi.productId
            LEFT JOIN (SELECT productId, COUNT(boardId) AS reviewCount
                       FROM board
                       WHERE boardCategoryId = 2
                       GROUP BY productId) b ON p.productId = b.productId
            LEFT JOIN (SELECT productId,COUNT(pickProductId) AS pickCount
                       FROM user_pickproduct
                       GROUP BY productId) up ON p.productId = up.productId
        <if test="type >= 0">
            WHERE p.categoryId = #{type}+1 <!-- Enum에서의 idx는 0부터 시작 -->
        </if>
        ORDER BY
        <choose>
            <when test="sort == 'rate'">p.sellCount;</when>
            <when test="sort == 'review'">b.reviewCount; </when>
            <when test="sort == 'pick'">up.pickCount DESC;</when>
            <when test="sort == 'low'">p.price;</when>
            <when test="sort == 'high'">p.price DESC ;</when>
            <otherwise>p.productName;</otherwise>
        </choose>

    </select>

    <!-- 상품 리스트 조회 : Mapper Service에서 Map 타입으로 파라미터 넣어주기 -->
    <select id="selectByPriceRange" resultMap="productForView" parameterType="HashMap" >
    <!-- Parameter : p( priceRange : int ) , sort(String) -->
        SELECT p.productid,
        p.productname,
        p.price,
        p.quantity,
        p.sellCount,
        b.reviewCount,
        up.pickCount,
        pi.imagePath
        FROM product p
        LEFT JOIN (SELECT productId, imagePath
                    FROM product_image
                    WHERE imageType = 'product') pi ON p.productId = pi.productId
        LEFT JOIN (SELECT productId, COUNT(boardId) AS reviewCount
                    FROM board
                    WHERE boardCategoryId = 2
                    GROUP BY productId) b ON p.productId = b.productId
        LEFT JOIN (SELECT productId,COUNT(pickProductId) AS pickCount
                    FROM user_pickproduct
                    GROUP BY productId) up ON p.productId = up.productId
        <choose>
            <when test="p == -1">
            </when>
            <when test="p == 4">
                WHERE p.price >= (#{p}*10000)
            </when>
            <otherwise>
                WHERE ((#{p}*10000) + 9999) >= p.price  AND  p.price >= (#{p}*10000)
            </otherwise>
        </choose>
        ORDER BY
        <choose>
            <when test="sort == 'rate'">p.sellCount;</when>
            <when test="sort == 'review'">b.reviewCount; </when>
            <when test="sort == 'pick'">up.pickCount DESC;</when>
            <when test="sort == 'low'">p.price;</when>
            <when test="sort == 'high'">p.price DESC ;</when>
            <otherwise>p.productName;</otherwise>
        </choose>
    </select>

    <select id="selectBySearch" resultMap="productForView" parameterType="HashMap" >
        <!-- Parameter : keyword( String ) , sort(String) -->
        SELECT p.productid,
        p.productname,
        p.price,
        p.quantity,
        p.sellCount,
        b.reviewCount,
        up.pickCount,
        pi.imagePath
        FROM product p
        LEFT JOIN (SELECT productId, imagePath
        FROM product_image
        WHERE imageType = 'product') pi ON p.productId = pi.productId
        LEFT JOIN (SELECT productId, COUNT(boardId) AS reviewCount
        FROM board
        WHERE boardCategoryId = 2
        GROUP BY productId) b ON p.productId = b.productId
        LEFT JOIN (SELECT productId,COUNT(pickProductId) AS pickCount
        FROM user_pickproduct
        GROUP BY productId) up ON p.productId = up.productId
        WHERE p.productName LIKE '%'+#{keyword}+'%'
        ORDER BY
        <choose>
            <when test="sort == 'rate'">p.sellCount;</when>
            <when test="sort == 'review'">b.reviewCount; </when>
            <when test="sort == 'pick'">up.pickCount DESC;</when>
            <when test="sort == 'low'">p.price;</when>
            <when test="sort == 'high'">p.price DESC ;</when>
            <otherwise>p.productName;</otherwise>
        </choose>
    </select>

<!-- pageNum : rownum() 기준으로 슬라이싱 -->
    <select id="selectListInPageByCategory" resultType="productForView" parameterType="hiccup.hiccupstore.product.dto.page.PageCriteria">
        <!-- Parameter : categoryId(int) , sort(String) -->
        SELECT
            pid,
            pname,
            pprice,
            pquanity,
            psellcount,
            previewcount,
            ppickcount,
            pimagepath
        FROM(
        <!-- select1 해줘야orderby 없이 조회결과 순번 부여 -->
            SELECT
                row_number() over (
                    <choose>
                        <when test="sort == 'rate'">order by(p.sellCount)</when>
                        <when test="sort == 'review'">order by(b.reviewCount) </when>
                        <when test="sort == 'pick'">order by(up.pickCount) DESC</when>
                        <when test="sort == 'low'">order by(p.price)</when>
                        <when test="sort == 'high'">order by(p.price) DESC </when>
                        <otherwise>order by(p.productName)</otherwise>
                    </choose>
                 ) as rnum,
                p.productid as pid,
                p.productname as pname,
                p.price as pprice,
                p.quantity as pquanity ,
                p.sellCount as psellcount,
                b.reviewCount as previewcount,
                up.pickCount as ppickcount,
                pi.imagePath as pimagepath
            FROM product p
            LEFT JOIN (
                SELECT productId, imagePath
                FROM product_image
                WHERE imageType = 'product'
                ) pi ON p.productId = pi.productId
            LEFT JOIN (
                SELECT productId, COUNT(boardId) AS reviewCount
                FROM board
                WHERE boardCategoryId = 2
                GROUP BY productId
                ) b ON p.productId = b.productId
            LEFT JOIN (
                SELECT productId,COUNT(pickProductId) AS pickCount
                FROM user_pickproduct
                GROUP BY productId
                ) up ON p.productId = up.productId
        <if test="type != null">
            WHERE p.categoryId = #{type}+1 <!-- Enum에서의 idx는 0부터 시작 -->
        </if>
<!--            ORDER BY-->
<!--        <choose>-->
<!--            <when test="sort == 'rate'">p.sellCount;</when>-->
<!--            <when test="sort == 'review'">b.reviewCount; </when>-->
<!--            <when test="sort == 'pick'">up.pickCount DESC;</when>-->
<!--            <when test="sort == 'low'">p.price;</when>-->
<!--            <when test="sort == 'high'">p.price DESC ;</when>-->
<!--            <otherwise>p.productName;</otherwise>-->
<!--        </choose>-->
        ) as d
        WHERE
            <![CDATA[
            d.rnum > (#{pageNum}-1)*#{amountInOnePage} AND d.rnum <= #{pageNum}*#{amountInOnePage}
            ]]>
    </select>

    <!-- 상품 리스트 조회 : Mapper Service에서 Map 타입으로 파라미터 넣어주기 -->
    <select id="selectListInPageByPriceRange" resultMap="productForView" parameterType="hiccup.hiccupstore.product.dto.page.PageCriteria">
        <!-- Parameter : p( priceRange : int ) , sort(String) -->
        SELECT p.productid,
        p.productname,
        p.price,
        p.quantity,
        p.sellCount,
        b.reviewCount,
        up.pickCount,
        pi.imagePath
        FROM product p
        LEFT JOIN (SELECT productId, imagePath
        FROM product_image
        WHERE imageType = 'product') pi ON p.productId = pi.productId
        LEFT JOIN (SELECT productId, COUNT(boardId) AS reviewCount
        FROM board
        WHERE boardCategoryId = 2
        GROUP BY productId) b ON p.productId = b.productId
        LEFT JOIN (SELECT productId,COUNT(pickProductId) AS pickCount
        FROM user_pickproduct
        GROUP BY productId) up ON p.productId = up.productId
        <choose>
            <when test="p == -1">
            </when>
            <when test="p == 4">
                WHERE p.price >= (#{p}*10000)
            </when>
            <otherwise>
                WHERE ((#{p}*10000) + 9999) >= p.price  AND  p.price >= (#{p}*10000)
            </otherwise>
        </choose>
        ORDER BY
        <choose>
            <when test="sort == 'rate'">p.sellCount;</when>
            <when test="sort == 'review'">b.reviewCount; </when>
            <when test="sort == 'pick'">up.pickCount DESC;</when>
            <when test="sort == 'low'">p.price;</when>
            <when test="sort == 'high'">p.price DESC ;</when>
            <otherwise>p.productName;</otherwise>
        </choose>
    </select>

    <select id="selectListInPageBySearch" resultMap="productForView" parameterType="hiccup.hiccupstore.product.dto.page.PageCriteria" >
        <!-- Parameter : keyword( String ) , sort(String) -->
        SELECT p.productid,
        p.productname,
        p.price,
        p.quantity,
        p.sellCount,
        b.reviewCount,
        up.pickCount,
        pi.imagePath
        FROM product p
        LEFT JOIN (SELECT productId, imagePath
        FROM product_image
        WHERE imageType = 'product') pi ON p.productId = pi.productId
        LEFT JOIN (SELECT productId, COUNT(boardId) AS reviewCount
        FROM board
        WHERE boardCategoryId = 2
        GROUP BY productId) b ON p.productId = b.productId
        LEFT JOIN (SELECT productId,COUNT(pickProductId) AS pickCount
        FROM user_pickproduct
        GROUP BY productId) up ON p.productId = up.productId
        WHERE p.productName LIKE '%'+#{keyword}+'%'
        ORDER BY
        <choose>
            <when test="sort == 'rate'">p.sellCount;</when>
            <when test="sort == 'review'">b.reviewCount; </when>
            <when test="sort == 'pick'">up.pickCount DESC;</when>
            <when test="sort == 'low'">p.price;</when>
            <when test="sort == 'high'">p.price DESC ;</when>
            <otherwise>p.productName;</otherwise>
        </choose>
    </select>

</mapper>